---
# Source: k8s-monitoring/charts/alloy/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8smon-alloy
  namespace: default
  labels:
    helm.sh/chart: alloy-0.11.0
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.6.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
---
# Source: k8s-monitoring/charts/alloy/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-alloy
  labels:
    helm.sh/chart: alloy-0.11.0
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.6.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: config
data:
  config.alloy: |-
    logging {
    	level  = "info"
    	format = "logfmt"
    }
    
    discovery.kubernetes "pods" {
    	role = "pod"
    }
    
    discovery.kubernetes "nodes" {
    	role = "node"
    }
    
    discovery.kubernetes "services" {
    	role = "service"
    }
    
    discovery.kubernetes "endpoints" {
    	role = "endpoints"
    }
    
    discovery.kubernetes "endpointslices" {
    	role = "endpointslice"
    }
    
    discovery.kubernetes "ingresses" {
    	role = "ingress"
    }
---
# Source: k8s-monitoring/templates/alloy-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8smon-alloy-singleton
  namespace: default
data:
  config.alloy: |-
    // Destination: loki (loki)
    otelcol.exporter.loki "loki" {
      forward_to = [loki.write.loki.receiver]
    }
    
    loki.write "loki" {
      endpoint {
        url = "http://loki.loki.svc:3100/api/push"
        tls_config {
          insecure_skip_verify = false
        }
      }
      external_labels = {
        cluster = "cluster-events-cluster",
        "k8s_cluster_name" = "cluster-events-cluster",
      }
    }
    
    // Feature: Cluster Events
    declare "cluster_events" {
      argument "logs_destinations" {
        comment = "Must be a list of log destinations where collected logs should be forwarded to"
      }
    
      loki.source.kubernetes_events "cluster_events" {
        job_name   = "integrations/kubernetes/eventhandler"
        log_format = "logfmt"
        forward_to = [loki.process.cluster_events.receiver]
      }
    
      loki.process "cluster_events" {
    
        // add a static source label to the logs so they can be differentiated / restricted if necessary
        stage.static_labels {
          values = {
            "source" = "kubernetes-events",
          }
        }
    
        // extract some of the fields from the log line, these could be used as labels, structured metadata, etc.
        stage.logfmt {
          mapping = {
            "component" = "sourcecomponent", // map the sourcecomponent field to component
            "kind" = "",
            "level" = "type", // most events don't have a level but they do have a "type" i.e. Normal, Warning, Error, etc.
            "name" = "",
            "node" = "sourcehost", // map the sourcehost field to node
          }
        }
        // set these values as labels, they may or may not be used as index labels in Loki as they can be dropped
        // prior to being written to Loki, but this makes them available
        stage.labels {
          values = {
            "component" = "",
            "kind" = "",
            "level" = "",
            "name" = "",
            "node" = "",
          }
        }
    
        // if kind=Node, set the node label by copying the instance label
        stage.match {
          selector = "{kind=\"Node\"}"
    
          stage.labels {
            values = {
              "node" = "name",
            }
          }
        }
    
        // set the level extracted key value as a normalized log level
        stage.match {
          selector = "{level=\"Normal\"}"
    
          stage.static_labels {
            values = {
              level = "Info",
            }
          }
        }
    
        // Only keep the labels that are defined in the `keepLabels` list.
        stage.label_keep {
          values = ["job","level","namespace","node","source"]
        }
        forward_to = argument.logs_destinations.value
      }
    }
    cluster_events "feature" {
      logs_destinations = [
        loki.write.loki.receiver,
      ]
    }
---
# Source: k8s-monitoring/charts/alloy/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8smon-alloy
  labels:
    helm.sh/chart: alloy-0.11.0
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.6.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
rules:
  # Rules which allow discovery.kubernetes to function.
  - apiGroups:
      - ""
      - "discovery.k8s.io"
      - "networking.k8s.io"
    resources:
      - endpoints
      - endpointslices
      - ingresses
      - nodes
      - nodes/proxy
      - nodes/metrics
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  # Rules which allow loki.source.kubernetes and loki.source.podlogs to work.
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "monitoring.grafana.com"
    resources:
      - podlogs
    verbs:
      - get
      - list
      - watch
  # Rules which allow mimir.rules.kubernetes to work.
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - prometheusrules
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - /metrics
    verbs:
      - get
  # Rules for prometheus.kubernetes.*
  - apiGroups: ["monitoring.coreos.com"]
    resources:
      - podmonitors
      - servicemonitors
      - probes
    verbs:
      - get
      - list
      - watch
  # Rules which allow eventhandler to work.
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - get
      - list
      - watch
  # needed for remote.kubernetes.*
  - apiGroups: [""]
    resources:
      - "configmaps"
      - "secrets"
    verbs:
      - get
      - list
      - watch
  # needed for otelcol.processor.k8sattributes
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
---
# Source: k8s-monitoring/charts/alloy/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8smon-alloy
  labels:
    helm.sh/chart: alloy-0.11.0
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.6.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8smon-alloy
subjects:
  - kind: ServiceAccount
    name: k8smon-alloy
    namespace: default
---
# Source: k8s-monitoring/charts/alloy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: k8smon-alloy
  labels:
    helm.sh/chart: alloy-0.11.0
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.6.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
    app.kubernetes.io/component: networking
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: k8smon
  internalTrafficPolicy: Cluster
  ports:
    - name: http-metrics
      port: 12345
      targetPort: 12345
      protocol: "TCP"
---
# Source: k8s-monitoring/charts/alloy/templates/controllers/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: k8smon-alloy
  labels:
    helm.sh/chart: alloy-0.11.0
    app.kubernetes.io/name: alloy
    app.kubernetes.io/instance: k8smon
    
    app.kubernetes.io/version: "v1.6.1"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: alloy
spec:
  minReadySeconds: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: alloy
      app.kubernetes.io/instance: k8smon
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: alloy
      labels:
        app.kubernetes.io/name: alloy
        app.kubernetes.io/instance: k8smon
    spec:
      serviceAccountName: k8smon-alloy
      containers:
        - name: alloy
          image: docker.io/grafana/alloy:v1.6.1
          imagePullPolicy: IfNotPresent
          args:
            - run
            - /etc/alloy/config.alloy
            - --storage.path=/tmp/alloy
            - --server.http.listen-addr=0.0.0.0:12345
            - --server.http.ui-path-prefix=/
            - --stability.level=generally-available
          env:
            - name: ALLOY_DEPLOY_MODE
              value: "helm"
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 12345
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 12345
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
        - name: config-reloader
          image: ghcr.io/jimmidyson/configmap-reload:v0.14.0
          args:
            - --volume-dir=/etc/alloy
            - --webhook-url=http://localhost:12345/-/reload
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
          resources:
            requests:
              cpu: 1m
              memory: 5Mi
      dnsPolicy: ClusterFirst
      volumes:
        - name: config
          configMap:
            name: k8smon-alloy
---
# Source: k8s-monitoring/templates/alloy.yaml
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: k8smon-alloy-singleton
  namespace: default
spec:
  interval: 1m
  chart:
    spec:
      chart: alloy
      sourceRef:
        kind: HelmRepository
        name: k8smon
        namespace: default
      interval: 1m
  values: 
    alloy:
      configMap:
        create: false
      nodeSelector:
        kubernetes.io/os: linux
      podAnnotations:
        k8s.grafana.com/logs.job: integrations/alloy
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - CHOWN
          - DAC_OVERRIDE
          - FOWNER
          - FSETID
          - KILL
          - SETGID
          - SETUID
          - SETPCAP
          - NET_BIND_SERVICE
          - NET_RAW
          - SYS_CHROOT
          - MKNOD
          - AUDIT_WRITE
          - SETFCAP
          drop:
          - ALL
        seccompProfile:
          type: RuntimeDefault
    collectorName: alloy-singleton
    controller:
      replicas: 1
      type: deployment
    crds:
      create: false
    enabled: true
    extraConfig: ""
    liveDebugging:
      enabled: false
    logging:
      format: logfmt
      level: info
    remoteConfig:
      auth:
        password: ""
        passwordFrom: ""
        passwordKey: password
        type: none
        username: ""
        usernameFrom: ""
        usernameKey: username
      enabled: false
      extraAttributes: {}
      pollFrequency: 5m
      secret:
        create: true
        embed: false
        name: ""
        namespace: ""
      url: ""
---
# Source: k8s-monitoring/templates/temp_helm_repo.yaml
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: k8smon
  namespace: default
spec:
  interval: 1m
  url: https://grafana.github.io/helm-charts
